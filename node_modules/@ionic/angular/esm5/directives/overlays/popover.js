import * as tslib_1 from "tslib";
/* eslint-disable */
/* tslint:disable */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, NgZone, TemplateRef } from "@angular/core";
import { ProxyCmp, proxyOutputs } from "../proxies-utils";
var IonPopover = /** @class */ (function () {
    function IonPopover(c, r, z) {
        var _this = this;
        this.z = z;
        this.isCmpOpen = false;
        c.detach();
        this.el = r.nativeElement;
        this.el.addEventListener('willPresent', function () {
            _this.isCmpOpen = true;
            c.detectChanges();
        });
        this.el.addEventListener('didDismiss', function () {
            _this.isCmpOpen = false;
            c.detectChanges();
        });
        proxyOutputs(this, this.el, ["ionPopoverDidPresent", "ionPopoverWillPresent", "ionPopoverWillDismiss", "ionPopoverDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
    }
    IonPopover.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    tslib_1.__decorate([
        ContentChild(TemplateRef, { static: false })
    ], IonPopover.prototype, "template", void 0);
    IonPopover = tslib_1.__decorate([
        ProxyCmp({ inputs: ["alignment", "animated", "arrow", "backdropDismiss", "cssClass", "dismissOnSelect", "enterAnimation", "event", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "translucent", "trigger", "triggerAction", "reference", "size"], "methods": ["present", "dismiss", "onDidDismiss", "onWillDismiss"] }),
        Component({ selector: "ion-popover", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [ngTemplateOutlet]=\"template\" *ngIf=\"isCmpOpen\"></ng-container>", inputs: ["alignment", "animated", "arrow", "backdropDismiss", "cssClass", "dismissOnSelect", "enterAnimation", "event", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "translucent", "trigger", "triggerAction", "reference", "size"] })
    ], IonPopover);
    return IonPopover;
}());
export { IonPopover };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb25pYy9hbmd1bGFyLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9vdmVybGF5cy9wb3BvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuSixPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTTFEO0lBY0Usb0JBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFwRSxpQkFjQztRQWQwRCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBSHBFLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFJekIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBRTFCLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFO1lBQ3RDLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFO1lBQ3JDLEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLHNCQUFzQixFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDNUwsQ0FBQzs7Z0JBZGMsaUJBQWlCO2dCQUFLLFVBQVU7Z0JBQWUsTUFBTTs7SUFidEI7UUFBN0MsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztnREFBNEI7SUFEOUQsVUFBVTtRQUZ0QixRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUM5VSxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLG1GQUErRSxFQUFFLE1BQU0sRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDO09BQ3BhLFVBQVUsQ0E2QnRCO0lBQUQsaUJBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTdCWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUHJveHlDbXAsIHByb3h5T3V0cHV0cyB9IGZyb20gXCIuLi9wcm94aWVzLXV0aWxzXCI7XG5pbXBvcnQgeyBDb21wb25lbnRzIH0gZnJvbSBcIkBpb25pYy9jb3JlXCI7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgSW9uUG9wb3ZlciBleHRlbmRzIENvbXBvbmVudHMuSW9uUG9wb3ZlciB7XG59XG5AUHJveHlDbXAoeyBpbnB1dHM6IFtcImFsaWdubWVudFwiLCBcImFuaW1hdGVkXCIsIFwiYXJyb3dcIiwgXCJiYWNrZHJvcERpc21pc3NcIiwgXCJjc3NDbGFzc1wiLCBcImRpc21pc3NPblNlbGVjdFwiLCBcImVudGVyQW5pbWF0aW9uXCIsIFwiZXZlbnRcIiwgXCJpc09wZW5cIiwgXCJrZXlib2FyZENsb3NlXCIsIFwibGVhdmVBbmltYXRpb25cIiwgXCJtb2RlXCIsIFwic2hvd0JhY2tkcm9wXCIsIFwidHJhbnNsdWNlbnRcIiwgXCJ0cmlnZ2VyXCIsIFwidHJpZ2dlckFjdGlvblwiLCBcInJlZmVyZW5jZVwiLCBcInNpemVcIl0sIFwibWV0aG9kc1wiOiBbXCJwcmVzZW50XCIsIFwiZGlzbWlzc1wiLCBcIm9uRGlkRGlzbWlzc1wiLCBcIm9uV2lsbERpc21pc3NcIl0gfSlcbkBDb21wb25lbnQoeyBzZWxlY3RvcjogXCJpb24tcG9wb3ZlclwiLCBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCwgdGVtcGxhdGU6IGA8bmctY29udGFpbmVyIFtuZ1RlbXBsYXRlT3V0bGV0XT1cInRlbXBsYXRlXCIgKm5nSWY9XCJpc0NtcE9wZW5cIj48L25nLWNvbnRhaW5lcj5gLCBpbnB1dHM6IFtcImFsaWdubWVudFwiLCBcImFuaW1hdGVkXCIsIFwiYXJyb3dcIiwgXCJiYWNrZHJvcERpc21pc3NcIiwgXCJjc3NDbGFzc1wiLCBcImRpc21pc3NPblNlbGVjdFwiLCBcImVudGVyQW5pbWF0aW9uXCIsIFwiZXZlbnRcIiwgXCJpc09wZW5cIiwgXCJrZXlib2FyZENsb3NlXCIsIFwibGVhdmVBbmltYXRpb25cIiwgXCJtb2RlXCIsIFwic2hvd0JhY2tkcm9wXCIsIFwidHJhbnNsdWNlbnRcIiwgXCJ0cmlnZ2VyXCIsIFwidHJpZ2dlckFjdGlvblwiLCBcInJlZmVyZW5jZVwiLCBcInNpemVcIl0gfSlcbmV4cG9ydCBjbGFzcyBJb25Qb3BvdmVyIHtcbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZiwgeyBzdGF0aWM6IGZhbHNlIH0pIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIGlvblBvcG92ZXJEaWRQcmVzZW50ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgaW9uUG9wb3ZlcldpbGxQcmVzZW50ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgaW9uUG9wb3ZlcldpbGxEaXNtaXNzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgaW9uUG9wb3ZlckRpZERpc21pc3MhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBkaWRQcmVzZW50ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgd2lsbFByZXNlbnQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICB3aWxsRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGRpZERpc21pc3MhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBpc0NtcE9wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcblxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignd2lsbFByZXNlbnQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmlzQ21wT3BlbiA9IHRydWU7XG4gICAgICBjLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RpZERpc21pc3MnLCAoKSA9PiB7XG4gICAgICB0aGlzLmlzQ21wT3BlbiA9IGZhbHNlO1xuICAgICAgYy5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG5cbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgW1wiaW9uUG9wb3ZlckRpZFByZXNlbnRcIiwgXCJpb25Qb3BvdmVyV2lsbFByZXNlbnRcIiwgXCJpb25Qb3BvdmVyV2lsbERpc21pc3NcIiwgXCJpb25Qb3BvdmVyRGlkRGlzbWlzc1wiLCBcImRpZFByZXNlbnRcIiwgXCJ3aWxsUHJlc2VudFwiLCBcIndpbGxEaXNtaXNzXCIsIFwiZGlkRGlzbWlzc1wiXSk7XG4gIH1cbn1cbiJdfQ==