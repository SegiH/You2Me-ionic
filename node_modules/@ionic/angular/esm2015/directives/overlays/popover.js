import * as tslib_1 from "tslib";
/* eslint-disable */
/* tslint:disable */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, NgZone, TemplateRef } from "@angular/core";
import { ProxyCmp, proxyOutputs } from "../proxies-utils";
let IonPopover = class IonPopover {
    constructor(c, r, z) {
        this.z = z;
        this.isCmpOpen = false;
        c.detach();
        this.el = r.nativeElement;
        this.el.addEventListener('willPresent', () => {
            this.isCmpOpen = true;
            c.detectChanges();
        });
        this.el.addEventListener('didDismiss', () => {
            this.isCmpOpen = false;
            c.detectChanges();
        });
        proxyOutputs(this, this.el, ["ionPopoverDidPresent", "ionPopoverWillPresent", "ionPopoverWillDismiss", "ionPopoverDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
    }
};
IonPopover.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
tslib_1.__decorate([
    ContentChild(TemplateRef, { static: false })
], IonPopover.prototype, "template", void 0);
IonPopover = tslib_1.__decorate([
    ProxyCmp({ inputs: ["alignment", "animated", "arrow", "backdropDismiss", "cssClass", "dismissOnSelect", "enterAnimation", "event", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "translucent", "trigger", "triggerAction", "reference", "size"], "methods": ["present", "dismiss", "onDidDismiss", "onWillDismiss"] }),
    Component({ selector: "ion-popover", changeDetection: ChangeDetectionStrategy.OnPush, template: `<ng-container [ngTemplateOutlet]="template" *ngIf="isCmpOpen"></ng-container>`, inputs: ["alignment", "animated", "arrow", "backdropDismiss", "cssClass", "dismissOnSelect", "enterAnimation", "event", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "translucent", "trigger", "triggerAction", "reference", "size"] })
], IonPopover);
export { IonPopover };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb25pYy9hbmd1bGFyLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9vdmVybGF5cy9wb3BvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuSixPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTTFELElBQWEsVUFBVSxHQUF2QixNQUFhLFVBQVU7SUFjckIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUhwRSxjQUFTLEdBQVksS0FBSyxDQUFDO1FBSXpCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUUxQixJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1lBQzFDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLHNCQUFzQixFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDNUwsQ0FBQztDQUNGLENBQUE7O1lBZmdCLGlCQUFpQjtZQUFLLFVBQVU7WUFBZSxNQUFNOztBQWJ0QjtJQUE3QyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDOzRDQUE0QjtBQUQ5RCxVQUFVO0lBRnRCLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxlQUFlLENBQUMsRUFBRSxDQUFDO0lBQzlVLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsK0VBQStFLEVBQUUsTUFBTSxFQUFFLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUM7R0FDcGEsVUFBVSxDQTZCdEI7U0E3QlksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIFRlbXBsYXRlUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFByb3h5Q21wLCBwcm94eU91dHB1dHMgfSBmcm9tIFwiLi4vcHJveGllcy11dGlsc1wiO1xuaW1wb3J0IHsgQ29tcG9uZW50cyB9IGZyb20gXCJAaW9uaWMvY29yZVwiO1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIElvblBvcG92ZXIgZXh0ZW5kcyBDb21wb25lbnRzLklvblBvcG92ZXIge1xufVxuQFByb3h5Q21wKHsgaW5wdXRzOiBbXCJhbGlnbm1lbnRcIiwgXCJhbmltYXRlZFwiLCBcImFycm93XCIsIFwiYmFja2Ryb3BEaXNtaXNzXCIsIFwiY3NzQ2xhc3NcIiwgXCJkaXNtaXNzT25TZWxlY3RcIiwgXCJlbnRlckFuaW1hdGlvblwiLCBcImV2ZW50XCIsIFwiaXNPcGVuXCIsIFwia2V5Ym9hcmRDbG9zZVwiLCBcImxlYXZlQW5pbWF0aW9uXCIsIFwibW9kZVwiLCBcInNob3dCYWNrZHJvcFwiLCBcInRyYW5zbHVjZW50XCIsIFwidHJpZ2dlclwiLCBcInRyaWdnZXJBY3Rpb25cIiwgXCJyZWZlcmVuY2VcIiwgXCJzaXplXCJdLCBcIm1ldGhvZHNcIjogW1wicHJlc2VudFwiLCBcImRpc21pc3NcIiwgXCJvbkRpZERpc21pc3NcIiwgXCJvbldpbGxEaXNtaXNzXCJdIH0pXG5AQ29tcG9uZW50KHsgc2VsZWN0b3I6IFwiaW9uLXBvcG92ZXJcIiwgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsIHRlbXBsYXRlOiBgPG5nLWNvbnRhaW5lciBbbmdUZW1wbGF0ZU91dGxldF09XCJ0ZW1wbGF0ZVwiICpuZ0lmPVwiaXNDbXBPcGVuXCI+PC9uZy1jb250YWluZXI+YCwgaW5wdXRzOiBbXCJhbGlnbm1lbnRcIiwgXCJhbmltYXRlZFwiLCBcImFycm93XCIsIFwiYmFja2Ryb3BEaXNtaXNzXCIsIFwiY3NzQ2xhc3NcIiwgXCJkaXNtaXNzT25TZWxlY3RcIiwgXCJlbnRlckFuaW1hdGlvblwiLCBcImV2ZW50XCIsIFwiaXNPcGVuXCIsIFwia2V5Ym9hcmRDbG9zZVwiLCBcImxlYXZlQW5pbWF0aW9uXCIsIFwibW9kZVwiLCBcInNob3dCYWNrZHJvcFwiLCBcInRyYW5zbHVjZW50XCIsIFwidHJpZ2dlclwiLCBcInRyaWdnZXJBY3Rpb25cIiwgXCJyZWZlcmVuY2VcIiwgXCJzaXplXCJdIH0pXG5leHBvcnQgY2xhc3MgSW9uUG9wb3ZlciB7XG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYsIHsgc3RhdGljOiBmYWxzZSB9KSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBpb25Qb3BvdmVyRGlkUHJlc2VudCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGlvblBvcG92ZXJXaWxsUHJlc2VudCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGlvblBvcG92ZXJXaWxsRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGlvblBvcG92ZXJEaWREaXNtaXNzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgZGlkUHJlc2VudCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIHdpbGxQcmVzZW50ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgd2lsbERpc21pc3MhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBkaWREaXNtaXNzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgaXNDbXBPcGVuOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3dpbGxQcmVzZW50JywgKCkgPT4ge1xuICAgICAgdGhpcy5pc0NtcE9wZW4gPSB0cnVlO1xuICAgICAgYy5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdkaWREaXNtaXNzJywgKCkgPT4ge1xuICAgICAgdGhpcy5pc0NtcE9wZW4gPSBmYWxzZTtcbiAgICAgIGMuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0pO1xuXG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFtcImlvblBvcG92ZXJEaWRQcmVzZW50XCIsIFwiaW9uUG9wb3ZlcldpbGxQcmVzZW50XCIsIFwiaW9uUG9wb3ZlcldpbGxEaXNtaXNzXCIsIFwiaW9uUG9wb3ZlckRpZERpc21pc3NcIiwgXCJkaWRQcmVzZW50XCIsIFwid2lsbFByZXNlbnRcIiwgXCJ3aWxsRGlzbWlzc1wiLCBcImRpZERpc21pc3NcIl0pO1xuICB9XG59XG4iXX0=