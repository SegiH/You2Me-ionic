import * as tslib_1 from "tslib";
/* eslint-disable */
/* tslint:disable */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, NgZone, TemplateRef } from "@angular/core";
import { ProxyCmp, proxyOutputs } from "../proxies-utils";
var IonModal = /** @class */ (function () {
    function IonModal(c, r, z) {
        var _this = this;
        this.z = z;
        this.isCmpOpen = false;
        c.detach();
        this.el = r.nativeElement;
        this.el.addEventListener('willPresent', function () {
            _this.isCmpOpen = true;
            c.detectChanges();
        });
        this.el.addEventListener('didDismiss', function () {
            _this.isCmpOpen = false;
            c.detectChanges();
        });
        proxyOutputs(this, this.el, ["ionModalDidPresent", "ionModalWillPresent", "ionModalWillDismiss", "ionModalDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
    }
    IonModal.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    tslib_1.__decorate([
        ContentChild(TemplateRef, { static: false })
    ], IonModal.prototype, "template", void 0);
    IonModal = tslib_1.__decorate([
        ProxyCmp({ inputs: ["animated", "backdropBreakpoint", "backdropDismiss", "breakpoints", "cssClass", "enterAnimation", "event", "handle", "initialBreakpoint", "isOpen", "keyboardClose", "leaveAnimation", "mode", "presentingElement", "showBackdrop", "swipeToClose", "translucent", "trigger"], "methods": ["present", "dismiss", "onDidDismiss", "onWillDismiss"] }),
        Component({ selector: "ion-modal", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [ngTemplateOutlet]=\"template\" *ngIf=\"isCmpOpen\"></ng-container>", inputs: ["animated", "backdropBreakpoint", "backdropDismiss", "breakpoints", "cssClass", "enterAnimation", "event", "handle", "initialBreakpoint", "isOpen", "keyboardClose", "leaveAnimation", "mode", "presentingElement", "showBackdrop", "swipeToClose", "translucent", "trigger"] })
    ], IonModal);
    return IonModal;
}());
export { IonModal };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW9uaWMvYW5ndWxhci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvb3ZlcmxheXMvbW9kYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25KLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFNMUQ7SUFjRSxrQkFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQXBFLGlCQWNDO1FBZDBELE1BQUMsR0FBRCxDQUFDLENBQVE7UUFIcEUsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUl6QixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUU7WUFDdEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUU7WUFDckMsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNwTCxDQUFDOztnQkFkYyxpQkFBaUI7Z0JBQUssVUFBVTtnQkFBZSxNQUFNOztJQWJ0QjtRQUE3QyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDOzhDQUE0QjtJQUQ5RCxRQUFRO1FBRnBCLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUN4VyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLG1GQUErRSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQztPQUM1YixRQUFRLENBNkJwQjtJQUFELGVBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTdCWSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUHJveHlDbXAsIHByb3h5T3V0cHV0cyB9IGZyb20gXCIuLi9wcm94aWVzLXV0aWxzXCI7XG5pbXBvcnQgeyBDb21wb25lbnRzIH0gZnJvbSBcIkBpb25pYy9jb3JlXCI7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgSW9uTW9kYWwgZXh0ZW5kcyBDb21wb25lbnRzLklvbk1vZGFsIHtcbn1cbkBQcm94eUNtcCh7IGlucHV0czogW1wiYW5pbWF0ZWRcIiwgXCJiYWNrZHJvcEJyZWFrcG9pbnRcIiwgXCJiYWNrZHJvcERpc21pc3NcIiwgXCJicmVha3BvaW50c1wiLCBcImNzc0NsYXNzXCIsIFwiZW50ZXJBbmltYXRpb25cIiwgXCJldmVudFwiLCBcImhhbmRsZVwiLCBcImluaXRpYWxCcmVha3BvaW50XCIsIFwiaXNPcGVuXCIsIFwia2V5Ym9hcmRDbG9zZVwiLCBcImxlYXZlQW5pbWF0aW9uXCIsIFwibW9kZVwiLCBcInByZXNlbnRpbmdFbGVtZW50XCIsIFwic2hvd0JhY2tkcm9wXCIsIFwic3dpcGVUb0Nsb3NlXCIsIFwidHJhbnNsdWNlbnRcIiwgXCJ0cmlnZ2VyXCJdLCBcIm1ldGhvZHNcIjogW1wicHJlc2VudFwiLCBcImRpc21pc3NcIiwgXCJvbkRpZERpc21pc3NcIiwgXCJvbldpbGxEaXNtaXNzXCJdIH0pXG5AQ29tcG9uZW50KHsgc2VsZWN0b3I6IFwiaW9uLW1vZGFsXCIsIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLCB0ZW1wbGF0ZTogYDxuZy1jb250YWluZXIgW25nVGVtcGxhdGVPdXRsZXRdPVwidGVtcGxhdGVcIiAqbmdJZj1cImlzQ21wT3BlblwiPjwvbmctY29udGFpbmVyPmAsIGlucHV0czogW1wiYW5pbWF0ZWRcIiwgXCJiYWNrZHJvcEJyZWFrcG9pbnRcIiwgXCJiYWNrZHJvcERpc21pc3NcIiwgXCJicmVha3BvaW50c1wiLCBcImNzc0NsYXNzXCIsIFwiZW50ZXJBbmltYXRpb25cIiwgXCJldmVudFwiLCBcImhhbmRsZVwiLCBcImluaXRpYWxCcmVha3BvaW50XCIsIFwiaXNPcGVuXCIsIFwia2V5Ym9hcmRDbG9zZVwiLCBcImxlYXZlQW5pbWF0aW9uXCIsIFwibW9kZVwiLCBcInByZXNlbnRpbmdFbGVtZW50XCIsIFwic2hvd0JhY2tkcm9wXCIsIFwic3dpcGVUb0Nsb3NlXCIsIFwidHJhbnNsdWNlbnRcIiwgXCJ0cmlnZ2VyXCJdIH0pXG5leHBvcnQgY2xhc3MgSW9uTW9kYWwge1xuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmLCB7IHN0YXRpYzogZmFsc2UgfSkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgaW9uTW9kYWxEaWRQcmVzZW50ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgaW9uTW9kYWxXaWxsUHJlc2VudCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGlvbk1vZGFsV2lsbERpc21pc3MhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBpb25Nb2RhbERpZERpc21pc3MhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBkaWRQcmVzZW50ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgd2lsbFByZXNlbnQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICB3aWxsRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGRpZERpc21pc3MhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBpc0NtcE9wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcblxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignd2lsbFByZXNlbnQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmlzQ21wT3BlbiA9IHRydWU7XG4gICAgICBjLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RpZERpc21pc3MnLCAoKSA9PiB7XG4gICAgICB0aGlzLmlzQ21wT3BlbiA9IGZhbHNlO1xuICAgICAgYy5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG5cbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgW1wiaW9uTW9kYWxEaWRQcmVzZW50XCIsIFwiaW9uTW9kYWxXaWxsUHJlc2VudFwiLCBcImlvbk1vZGFsV2lsbERpc21pc3NcIiwgXCJpb25Nb2RhbERpZERpc21pc3NcIiwgXCJkaWRQcmVzZW50XCIsIFwid2lsbFByZXNlbnRcIiwgXCJ3aWxsRGlzbWlzc1wiLCBcImRpZERpc21pc3NcIl0pO1xuICB9XG59XG4iXX0=